{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nconst SEUIL_RUPTURE = 5; // Définissez votre seuil ici\nlet AjouterProduitComponent = class AjouterProduitComponent {\n  constructor(fb, produitService) {\n    this.fb = fb;\n    this.produitService = produitService;\n    this.envoiEnCours = false;\n    this.messageSucces = '';\n    this.messageErreur = '';\n    this.produitAjoute = new EventEmitter();\n    this.fermer = new EventEmitter();\n    this.formulaireProduit = this.fb.group({\n      nom: ['', Validators.required],\n      code: ['', Validators.required],\n      quantite: [1, [Validators.required, Validators.min(0)]],\n      prix: [null, [Validators.required, Validators.min(0)]],\n      date_expiration: ['', Validators.required]\n      // Le champ statut a été retiré car calculé automatiquement\n    });\n  }\n  // Méthode pour déterminer le statut\n  getStatut(quantite) {\n    if (quantite === 0) return 'Indisponible';\n    if (quantite <= SEUIL_RUPTURE) return 'Rupture';\n    return 'En stock';\n  }\n  // Propriété calculée pour optimiser le template\n  get currentStatut() {\n    const quantite = this.formulaireProduit.get('quantite')?.value ?? 0;\n    return {\n      text: this.getStatut(quantite),\n      class: this.getStatutClass(quantite),\n      icon: this.getStatutIcon(quantite)\n    };\n  }\n  getStatutClass(quantite) {\n    const statut = this.getStatut(quantite);\n    return {\n      'En stock': 'bg-green-50 text-green-800',\n      'Rupture': 'bg-amber-50 text-amber-800',\n      'Indisponible': 'bg-red-50 text-red-800'\n    }[statut];\n  }\n  getStatutIcon(quantite) {\n    const statut = this.getStatut(quantite);\n    return {\n      'En stock': 'ri-checkbox-circle-line text-green-500',\n      'Rupture': 'ri-alert-line text-amber-500',\n      'Indisponible': 'ri-close-circle-line text-red-500'\n    }[statut];\n  }\n  envoyer() {\n    if (this.formulaireProduit.invalid) {\n      this.formulaireProduit.markAllAsTouched();\n      return;\n    }\n    this.envoiEnCours = true;\n    this.messageSucces = '';\n    this.messageErreur = '';\n    const formValue = this.formulaireProduit.value;\n    const produit = {\n      ...formValue,\n      statut: this.getStatut(formValue.quantite) // Ajout du statut calculé\n    };\n\n    this.produitService.ajouterProduit(produit).subscribe({\n      next: produitAjoute => {\n        this.messageSucces = 'Produit ajouté avec succès !';\n        this.produitAjoute.emit(produitAjoute);\n        this.formulaireProduit.reset({\n          quantite: 1\n        });\n        this.envoiEnCours = false;\n      },\n      error: () => {\n        this.messageErreur = \"Erreur lors de l'ajout du produit.\";\n        this.envoiEnCours = false;\n      }\n    });\n  }\n};\n__decorate([Output()], AjouterProduitComponent.prototype, \"produitAjoute\", void 0);\n__decorate([Output()], AjouterProduitComponent.prototype, \"fermer\", void 0);\nAjouterProduitComponent = __decorate([Component({\n  selector: 'app-ajouter-produit',\n  templateUrl: './ajouter-produit.component.html'\n})], AjouterProduitComponent);\nexport { AjouterProduitComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}