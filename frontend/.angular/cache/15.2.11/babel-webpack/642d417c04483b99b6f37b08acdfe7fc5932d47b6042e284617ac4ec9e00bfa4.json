{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet ProduitsComponent = class ProduitsComponent {\n  constructor(produitService, fb) {\n    this.produitService = produitService;\n    this.fb = fb;\n    this.produits = [];\n    this.afficherFormulaire = false;\n    this.produitEnEdition = null;\n    this.envoiEnCours = false;\n    // ðŸ”¥ BoÃ®te de dialogue de suppression\n    this.produitASupprimer = null;\n    this.formulaireProduit = this.fb.group({\n      nom: ['', Validators.required],\n      code: ['', Validators.required],\n      quantite: [1, [Validators.required, Validators.min(0)]],\n      prix: [null, [Validators.required, Validators.min(0)]],\n      date_expiration: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.chargerProduits();\n  }\n  chargerProduits() {\n    this.produitService.getProduits().subscribe(data => {\n      this.produits = data;\n    });\n  }\n  get currentStatut() {\n    const quantite = this.formulaireProduit.get('quantite')?.value || 0;\n    if (quantite === 0) {\n      return {\n        text: 'Indisponible',\n        class: 'bg-red-100 text-red-800',\n        icon: 'ri-close-line text-red-600'\n      };\n    } else if (quantite <= 5) {\n      return {\n        text: 'Rupture',\n        class: 'bg-amber-100 text-amber-800',\n        icon: 'ri-alert-line text-amber-600'\n      };\n    } else {\n      return {\n        text: 'En stock',\n        class: 'bg-green-100 text-green-800',\n        icon: 'ri-check-line text-green-600'\n      };\n    }\n  }\n  ouvrirFormulaireAjout() {\n    this.produitEnEdition = null;\n    this.formulaireProduit.reset({\n      quantite: 1\n    });\n    this.afficherFormulaire = true;\n  }\n  commencerModification(produit) {\n    this.produitEnEdition = produit;\n    this.formulaireProduit.patchValue({\n      nom: produit.nom,\n      code: produit.code,\n      quantite: produit.quantite,\n      prix: produit.prix,\n      date_expiration: produit.date_expiration.split('T')[0] // Format pour input date\n    });\n\n    this.afficherFormulaire = true;\n    // ðŸ”½ Scroll vers le formulaire aprÃ¨s affichage\n    setTimeout(() => {\n      this.formulaireProduitElement?.nativeElement.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }, 100);\n  }\n  onSubmit() {\n    if (this.formulaireProduit.invalid) return;\n    this.envoiEnCours = true;\n    const produitData = {\n      ...this.formulaireProduit.value,\n      statut: this.currentStatut.text\n    };\n    if (this.produitEnEdition) {\n      this.produitService.modifierProduit(this.produitEnEdition.id, produitData).subscribe({\n        next: produit => {\n          const index = this.produits.findIndex(p => p.id === produit.id);\n          if (index !== -1) this.produits[index] = produit;\n          this.fermerFormulaire();\n        },\n        error: err => console.error(err),\n        complete: () => this.envoiEnCours = false\n      });\n    } else {\n      this.produitService.ajouterProduit(produitData).subscribe({\n        next: produit => {\n          this.produits.unshift(produit);\n          this.fermerFormulaire();\n        },\n        error: err => console.error(err),\n        complete: () => this.envoiEnCours = false\n      });\n    }\n  }\n  // ðŸ†• Ouvre la boÃ®te de confirmation\n  demanderSuppression(produit) {\n    this.produitASupprimer = produit;\n  }\n  // ðŸ†• Annule la boÃ®te de confirmation\n  annulerSuppression() {\n    this.produitASupprimer = null;\n  }\n  // ðŸ†• Confirme et exÃ©cute la suppression\n  confirmerSuppression() {\n    if (this.produitASupprimer) {\n      this.produitService.supprimerProduit(this.produitASupprimer.id).subscribe({\n        next: () => {\n          this.produits = this.produits.filter(p => p.id !== this.produitASupprimer.id);\n          this.produitASupprimer = null;\n        },\n        error: err => console.error(err)\n      });\n    }\n  }\n  fermerFormulaire() {\n    this.afficherFormulaire = false;\n    this.produitEnEdition = null;\n    this.envoiEnCours = false;\n  }\n};\n__decorate([ViewChild('formulaireProduitRef')], ProduitsComponent.prototype, \"formulaireProduitElement\", void 0);\nProduitsComponent = __decorate([Component({\n  selector: 'app-produits',\n  templateUrl: './produits.component.html'\n})], ProduitsComponent);\nexport { ProduitsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}